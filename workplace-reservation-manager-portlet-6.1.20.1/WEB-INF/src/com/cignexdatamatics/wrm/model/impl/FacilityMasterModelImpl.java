/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cignexdatamatics.wrm.model.impl;

import com.cignexdatamatics.wrm.model.FacilityMaster;
import com.cignexdatamatics.wrm.model.FacilityMasterModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FacilityMaster service. Represents a row in the &quot;wrm_FacilityMaster&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cignexdatamatics.wrm.model.FacilityMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FacilityMasterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FacilityMasterImpl
 * @see com.cignexdatamatics.wrm.model.FacilityMaster
 * @see com.cignexdatamatics.wrm.model.FacilityMasterModel
 * @generated
 */
public class FacilityMasterModelImpl extends BaseModelImpl<FacilityMaster>
	implements FacilityMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a facility master model instance should use the {@link com.cignexdatamatics.wrm.model.FacilityMaster} interface instead.
	 */
	public static final String TABLE_NAME = "wrm_FacilityMaster";
	public static final Object[][] TABLE_COLUMNS = {
			{ "facilitiesId", Types.BIGINT },
			{ "facilitiesName", Types.VARCHAR },
			{ "facilitiesDesc", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table wrm_FacilityMaster (facilitiesId LONG not null primary key,facilitiesName VARCHAR(75) null,facilitiesDesc VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table wrm_FacilityMaster";
	public static final String ORDER_BY_JPQL = " ORDER BY facilityMaster.facilitiesName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY wrm_FacilityMaster.facilitiesName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cignexdatamatics.wrm.model.FacilityMaster"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cignexdatamatics.wrm.model.FacilityMaster"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cignexdatamatics.wrm.model.FacilityMaster"),
			true);
	public static long FACILITIESID_COLUMN_BITMASK = 1L;
	public static long FACILITIESNAME_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cignexdatamatics.wrm.model.FacilityMaster"));

	public FacilityMasterModelImpl() {
	}

	public long getPrimaryKey() {
		return _facilitiesId;
	}

	public void setPrimaryKey(long primaryKey) {
		setFacilitiesId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_facilitiesId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return FacilityMaster.class;
	}

	public String getModelClassName() {
		return FacilityMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("facilitiesId", getFacilitiesId());
		attributes.put("facilitiesName", getFacilitiesName());
		attributes.put("facilitiesDesc", getFacilitiesDesc());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long facilitiesId = (Long)attributes.get("facilitiesId");

		if (facilitiesId != null) {
			setFacilitiesId(facilitiesId);
		}

		String facilitiesName = (String)attributes.get("facilitiesName");

		if (facilitiesName != null) {
			setFacilitiesName(facilitiesName);
		}

		String facilitiesDesc = (String)attributes.get("facilitiesDesc");

		if (facilitiesDesc != null) {
			setFacilitiesDesc(facilitiesDesc);
		}
	}

	public long getFacilitiesId() {
		return _facilitiesId;
	}

	public void setFacilitiesId(long facilitiesId) {
		_columnBitmask |= FACILITIESID_COLUMN_BITMASK;

		if (!_setOriginalFacilitiesId) {
			_setOriginalFacilitiesId = true;

			_originalFacilitiesId = _facilitiesId;
		}

		_facilitiesId = facilitiesId;
	}

	public long getOriginalFacilitiesId() {
		return _originalFacilitiesId;
	}

	public String getFacilitiesName() {
		if (_facilitiesName == null) {
			return StringPool.BLANK;
		}
		else {
			return _facilitiesName;
		}
	}

	public void setFacilitiesName(String facilitiesName) {
		_columnBitmask = -1L;

		if (_originalFacilitiesName == null) {
			_originalFacilitiesName = _facilitiesName;
		}

		_facilitiesName = facilitiesName;
	}

	public String getOriginalFacilitiesName() {
		return GetterUtil.getString(_originalFacilitiesName);
	}

	public String getFacilitiesDesc() {
		if (_facilitiesDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _facilitiesDesc;
		}
	}

	public void setFacilitiesDesc(String facilitiesDesc) {
		_facilitiesDesc = facilitiesDesc;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FacilityMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FacilityMaster toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (FacilityMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		FacilityMasterImpl facilityMasterImpl = new FacilityMasterImpl();

		facilityMasterImpl.setFacilitiesId(getFacilitiesId());
		facilityMasterImpl.setFacilitiesName(getFacilitiesName());
		facilityMasterImpl.setFacilitiesDesc(getFacilitiesDesc());

		facilityMasterImpl.resetOriginalValues();

		return facilityMasterImpl;
	}

	public int compareTo(FacilityMaster facilityMaster) {
		int value = 0;

		value = getFacilitiesName().compareTo(facilityMaster.getFacilitiesName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		FacilityMaster facilityMaster = null;

		try {
			facilityMaster = (FacilityMaster)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = facilityMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FacilityMasterModelImpl facilityMasterModelImpl = this;

		facilityMasterModelImpl._originalFacilitiesId = facilityMasterModelImpl._facilitiesId;

		facilityMasterModelImpl._setOriginalFacilitiesId = false;

		facilityMasterModelImpl._originalFacilitiesName = facilityMasterModelImpl._facilitiesName;

		facilityMasterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FacilityMaster> toCacheModel() {
		FacilityMasterCacheModel facilityMasterCacheModel = new FacilityMasterCacheModel();

		facilityMasterCacheModel.facilitiesId = getFacilitiesId();

		facilityMasterCacheModel.facilitiesName = getFacilitiesName();

		String facilitiesName = facilityMasterCacheModel.facilitiesName;

		if ((facilitiesName != null) && (facilitiesName.length() == 0)) {
			facilityMasterCacheModel.facilitiesName = null;
		}

		facilityMasterCacheModel.facilitiesDesc = getFacilitiesDesc();

		String facilitiesDesc = facilityMasterCacheModel.facilitiesDesc;

		if ((facilitiesDesc != null) && (facilitiesDesc.length() == 0)) {
			facilityMasterCacheModel.facilitiesDesc = null;
		}

		return facilityMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{facilitiesId=");
		sb.append(getFacilitiesId());
		sb.append(", facilitiesName=");
		sb.append(getFacilitiesName());
		sb.append(", facilitiesDesc=");
		sb.append(getFacilitiesDesc());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.cignexdatamatics.wrm.model.FacilityMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>facilitiesId</column-name><column-value><![CDATA[");
		sb.append(getFacilitiesId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>facilitiesName</column-name><column-value><![CDATA[");
		sb.append(getFacilitiesName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>facilitiesDesc</column-name><column-value><![CDATA[");
		sb.append(getFacilitiesDesc());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FacilityMaster.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			FacilityMaster.class
		};
	private long _facilitiesId;
	private long _originalFacilitiesId;
	private boolean _setOriginalFacilitiesId;
	private String _facilitiesName;
	private String _originalFacilitiesName;
	private String _facilitiesDesc;
	private long _columnBitmask;
	private FacilityMaster _escapedModelProxy;
}