/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cignexdatamatics.wrm.model.impl;

import com.cignexdatamatics.wrm.model.NewBooking;
import com.cignexdatamatics.wrm.model.NewBookingModel;
import com.cignexdatamatics.wrm.model.NewBookingSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the NewBooking service. Represents a row in the &quot;wrm_NewBooking&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cignexdatamatics.wrm.model.NewBookingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NewBookingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NewBookingImpl
 * @see com.cignexdatamatics.wrm.model.NewBooking
 * @see com.cignexdatamatics.wrm.model.NewBookingModel
 * @generated
 */
@JSON(strict = true)
public class NewBookingModelImpl extends BaseModelImpl<NewBooking>
	implements NewBookingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a new booking model instance should use the {@link com.cignexdatamatics.wrm.model.NewBooking} interface instead.
	 */
	public static final String TABLE_NAME = "wrm_NewBooking";
	public static final Object[][] TABLE_COLUMNS = {
			{ "bookingId", Types.BIGINT },
			{ "meetingTitle", Types.VARCHAR },
			{ "meetingDesc", Types.VARCHAR },
			{ "hostId", Types.BIGINT },
			{ "fromDate", Types.TIMESTAMP },
			{ "toDate", Types.TIMESTAMP },
			{ "startTime", Types.VARCHAR },
			{ "endTime", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table wrm_NewBooking (bookingId LONG not null primary key,meetingTitle VARCHAR(75) null,meetingDesc VARCHAR(75) null,hostId LONG,fromDate DATE null,toDate DATE null,startTime VARCHAR(75) null,endTime VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table wrm_NewBooking";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cignexdatamatics.wrm.model.NewBooking"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cignexdatamatics.wrm.model.NewBooking"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cignexdatamatics.wrm.model.NewBooking"),
			true);
	public static long ENDTIME_COLUMN_BITMASK = 1L;
	public static long FROMDATE_COLUMN_BITMASK = 2L;
	public static long STARTTIME_COLUMN_BITMASK = 4L;
	public static long TODATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static NewBooking toModel(NewBookingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		NewBooking model = new NewBookingImpl();

		model.setBookingId(soapModel.getBookingId());
		model.setMeetingTitle(soapModel.getMeetingTitle());
		model.setMeetingDesc(soapModel.getMeetingDesc());
		model.setHostId(soapModel.getHostId());
		model.setFromDate(soapModel.getFromDate());
		model.setToDate(soapModel.getToDate());
		model.setStartTime(soapModel.getStartTime());
		model.setEndTime(soapModel.getEndTime());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<NewBooking> toModels(NewBookingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<NewBooking> models = new ArrayList<NewBooking>(soapModels.length);

		for (NewBookingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cignexdatamatics.wrm.model.NewBooking"));

	public NewBookingModelImpl() {
	}

	public long getPrimaryKey() {
		return _bookingId;
	}

	public void setPrimaryKey(long primaryKey) {
		setBookingId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_bookingId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return NewBooking.class;
	}

	public String getModelClassName() {
		return NewBooking.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("bookingId", getBookingId());
		attributes.put("meetingTitle", getMeetingTitle());
		attributes.put("meetingDesc", getMeetingDesc());
		attributes.put("hostId", getHostId());
		attributes.put("fromDate", getFromDate());
		attributes.put("toDate", getToDate());
		attributes.put("startTime", getStartTime());
		attributes.put("endTime", getEndTime());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long bookingId = (Long)attributes.get("bookingId");

		if (bookingId != null) {
			setBookingId(bookingId);
		}

		String meetingTitle = (String)attributes.get("meetingTitle");

		if (meetingTitle != null) {
			setMeetingTitle(meetingTitle);
		}

		String meetingDesc = (String)attributes.get("meetingDesc");

		if (meetingDesc != null) {
			setMeetingDesc(meetingDesc);
		}

		Long hostId = (Long)attributes.get("hostId");

		if (hostId != null) {
			setHostId(hostId);
		}

		Date fromDate = (Date)attributes.get("fromDate");

		if (fromDate != null) {
			setFromDate(fromDate);
		}

		Date toDate = (Date)attributes.get("toDate");

		if (toDate != null) {
			setToDate(toDate);
		}

		String startTime = (String)attributes.get("startTime");

		if (startTime != null) {
			setStartTime(startTime);
		}

		String endTime = (String)attributes.get("endTime");

		if (endTime != null) {
			setEndTime(endTime);
		}
	}

	@JSON
	public long getBookingId() {
		return _bookingId;
	}

	public void setBookingId(long bookingId) {
		_bookingId = bookingId;
	}

	@JSON
	public String getMeetingTitle() {
		if (_meetingTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _meetingTitle;
		}
	}

	public void setMeetingTitle(String meetingTitle) {
		_meetingTitle = meetingTitle;
	}

	@JSON
	public String getMeetingDesc() {
		if (_meetingDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _meetingDesc;
		}
	}

	public void setMeetingDesc(String meetingDesc) {
		_meetingDesc = meetingDesc;
	}

	@JSON
	public long getHostId() {
		return _hostId;
	}

	public void setHostId(long hostId) {
		_hostId = hostId;
	}

	@JSON
	public Date getFromDate() {
		return _fromDate;
	}

	public void setFromDate(Date fromDate) {
		_columnBitmask |= FROMDATE_COLUMN_BITMASK;

		if (_originalFromDate == null) {
			_originalFromDate = _fromDate;
		}

		_fromDate = fromDate;
	}

	public Date getOriginalFromDate() {
		return _originalFromDate;
	}

	@JSON
	public Date getToDate() {
		return _toDate;
	}

	public void setToDate(Date toDate) {
		_columnBitmask |= TODATE_COLUMN_BITMASK;

		if (_originalToDate == null) {
			_originalToDate = _toDate;
		}

		_toDate = toDate;
	}

	public Date getOriginalToDate() {
		return _originalToDate;
	}

	@JSON
	public String getStartTime() {
		if (_startTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _startTime;
		}
	}

	public void setStartTime(String startTime) {
		_columnBitmask |= STARTTIME_COLUMN_BITMASK;

		if (_originalStartTime == null) {
			_originalStartTime = _startTime;
		}

		_startTime = startTime;
	}

	public String getOriginalStartTime() {
		return GetterUtil.getString(_originalStartTime);
	}

	@JSON
	public String getEndTime() {
		if (_endTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _endTime;
		}
	}

	public void setEndTime(String endTime) {
		_columnBitmask |= ENDTIME_COLUMN_BITMASK;

		if (_originalEndTime == null) {
			_originalEndTime = _endTime;
		}

		_endTime = endTime;
	}

	public String getOriginalEndTime() {
		return GetterUtil.getString(_originalEndTime);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			NewBooking.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NewBooking toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (NewBooking)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		NewBookingImpl newBookingImpl = new NewBookingImpl();

		newBookingImpl.setBookingId(getBookingId());
		newBookingImpl.setMeetingTitle(getMeetingTitle());
		newBookingImpl.setMeetingDesc(getMeetingDesc());
		newBookingImpl.setHostId(getHostId());
		newBookingImpl.setFromDate(getFromDate());
		newBookingImpl.setToDate(getToDate());
		newBookingImpl.setStartTime(getStartTime());
		newBookingImpl.setEndTime(getEndTime());

		newBookingImpl.resetOriginalValues();

		return newBookingImpl;
	}

	public int compareTo(NewBooking newBooking) {
		long primaryKey = newBooking.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		NewBooking newBooking = null;

		try {
			newBooking = (NewBooking)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = newBooking.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		NewBookingModelImpl newBookingModelImpl = this;

		newBookingModelImpl._originalFromDate = newBookingModelImpl._fromDate;

		newBookingModelImpl._originalToDate = newBookingModelImpl._toDate;

		newBookingModelImpl._originalStartTime = newBookingModelImpl._startTime;

		newBookingModelImpl._originalEndTime = newBookingModelImpl._endTime;

		newBookingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<NewBooking> toCacheModel() {
		NewBookingCacheModel newBookingCacheModel = new NewBookingCacheModel();

		newBookingCacheModel.bookingId = getBookingId();

		newBookingCacheModel.meetingTitle = getMeetingTitle();

		String meetingTitle = newBookingCacheModel.meetingTitle;

		if ((meetingTitle != null) && (meetingTitle.length() == 0)) {
			newBookingCacheModel.meetingTitle = null;
		}

		newBookingCacheModel.meetingDesc = getMeetingDesc();

		String meetingDesc = newBookingCacheModel.meetingDesc;

		if ((meetingDesc != null) && (meetingDesc.length() == 0)) {
			newBookingCacheModel.meetingDesc = null;
		}

		newBookingCacheModel.hostId = getHostId();

		Date fromDate = getFromDate();

		if (fromDate != null) {
			newBookingCacheModel.fromDate = fromDate.getTime();
		}
		else {
			newBookingCacheModel.fromDate = Long.MIN_VALUE;
		}

		Date toDate = getToDate();

		if (toDate != null) {
			newBookingCacheModel.toDate = toDate.getTime();
		}
		else {
			newBookingCacheModel.toDate = Long.MIN_VALUE;
		}

		newBookingCacheModel.startTime = getStartTime();

		String startTime = newBookingCacheModel.startTime;

		if ((startTime != null) && (startTime.length() == 0)) {
			newBookingCacheModel.startTime = null;
		}

		newBookingCacheModel.endTime = getEndTime();

		String endTime = newBookingCacheModel.endTime;

		if ((endTime != null) && (endTime.length() == 0)) {
			newBookingCacheModel.endTime = null;
		}

		return newBookingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{bookingId=");
		sb.append(getBookingId());
		sb.append(", meetingTitle=");
		sb.append(getMeetingTitle());
		sb.append(", meetingDesc=");
		sb.append(getMeetingDesc());
		sb.append(", hostId=");
		sb.append(getHostId());
		sb.append(", fromDate=");
		sb.append(getFromDate());
		sb.append(", toDate=");
		sb.append(getToDate());
		sb.append(", startTime=");
		sb.append(getStartTime());
		sb.append(", endTime=");
		sb.append(getEndTime());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.cignexdatamatics.wrm.model.NewBooking");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bookingId</column-name><column-value><![CDATA[");
		sb.append(getBookingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>meetingTitle</column-name><column-value><![CDATA[");
		sb.append(getMeetingTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>meetingDesc</column-name><column-value><![CDATA[");
		sb.append(getMeetingDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hostId</column-name><column-value><![CDATA[");
		sb.append(getHostId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromDate</column-name><column-value><![CDATA[");
		sb.append(getFromDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toDate</column-name><column-value><![CDATA[");
		sb.append(getToDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startTime</column-name><column-value><![CDATA[");
		sb.append(getStartTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endTime</column-name><column-value><![CDATA[");
		sb.append(getEndTime());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = NewBooking.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			NewBooking.class
		};
	private long _bookingId;
	private String _meetingTitle;
	private String _meetingDesc;
	private long _hostId;
	private Date _fromDate;
	private Date _originalFromDate;
	private Date _toDate;
	private Date _originalToDate;
	private String _startTime;
	private String _originalStartTime;
	private String _endTime;
	private String _originalEndTime;
	private long _columnBitmask;
	private NewBooking _escapedModelProxy;
}