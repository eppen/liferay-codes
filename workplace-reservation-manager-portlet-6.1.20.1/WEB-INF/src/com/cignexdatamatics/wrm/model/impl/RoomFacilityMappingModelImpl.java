/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cignexdatamatics.wrm.model.impl;

import com.cignexdatamatics.wrm.model.RoomFacilityMapping;
import com.cignexdatamatics.wrm.model.RoomFacilityMappingModel;
import com.cignexdatamatics.wrm.service.persistence.RoomFacilityMappingPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RoomFacilityMapping service. Represents a row in the &quot;wrm_RoomFacilityMapping&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cignexdatamatics.wrm.model.RoomFacilityMappingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RoomFacilityMappingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RoomFacilityMappingImpl
 * @see com.cignexdatamatics.wrm.model.RoomFacilityMapping
 * @see com.cignexdatamatics.wrm.model.RoomFacilityMappingModel
 * @generated
 */
public class RoomFacilityMappingModelImpl extends BaseModelImpl<RoomFacilityMapping>
	implements RoomFacilityMappingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a room facility mapping model instance should use the {@link com.cignexdatamatics.wrm.model.RoomFacilityMapping} interface instead.
	 */
	public static final String TABLE_NAME = "wrm_RoomFacilityMapping";
	public static final Object[][] TABLE_COLUMNS = {
			{ "roomId", Types.BIGINT },
			{ "facilitiesId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table wrm_RoomFacilityMapping (roomId LONG not null,facilitiesId LONG not null,primary key (roomId, facilitiesId))";
	public static final String TABLE_SQL_DROP = "drop table wrm_RoomFacilityMapping";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cignexdatamatics.wrm.model.RoomFacilityMapping"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cignexdatamatics.wrm.model.RoomFacilityMapping"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cignexdatamatics.wrm.model.RoomFacilityMapping"),
			true);
	public static long FACILITIESID_COLUMN_BITMASK = 1L;
	public static long ROOMID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cignexdatamatics.wrm.model.RoomFacilityMapping"));

	public RoomFacilityMappingModelImpl() {
	}

	public RoomFacilityMappingPK getPrimaryKey() {
		return new RoomFacilityMappingPK(_roomId, _facilitiesId);
	}

	public void setPrimaryKey(RoomFacilityMappingPK primaryKey) {
		setRoomId(primaryKey.roomId);
		setFacilitiesId(primaryKey.facilitiesId);
	}

	public Serializable getPrimaryKeyObj() {
		return new RoomFacilityMappingPK(_roomId, _facilitiesId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((RoomFacilityMappingPK)primaryKeyObj);
	}

	public Class<?> getModelClass() {
		return RoomFacilityMapping.class;
	}

	public String getModelClassName() {
		return RoomFacilityMapping.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("roomId", getRoomId());
		attributes.put("facilitiesId", getFacilitiesId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long roomId = (Long)attributes.get("roomId");

		if (roomId != null) {
			setRoomId(roomId);
		}

		Long facilitiesId = (Long)attributes.get("facilitiesId");

		if (facilitiesId != null) {
			setFacilitiesId(facilitiesId);
		}
	}

	public long getRoomId() {
		return _roomId;
	}

	public void setRoomId(long roomId) {
		_columnBitmask |= ROOMID_COLUMN_BITMASK;

		if (!_setOriginalRoomId) {
			_setOriginalRoomId = true;

			_originalRoomId = _roomId;
		}

		_roomId = roomId;
	}

	public long getOriginalRoomId() {
		return _originalRoomId;
	}

	public long getFacilitiesId() {
		return _facilitiesId;
	}

	public void setFacilitiesId(long facilitiesId) {
		_columnBitmask |= FACILITIESID_COLUMN_BITMASK;

		if (!_setOriginalFacilitiesId) {
			_setOriginalFacilitiesId = true;

			_originalFacilitiesId = _facilitiesId;
		}

		_facilitiesId = facilitiesId;
	}

	public long getOriginalFacilitiesId() {
		return _originalFacilitiesId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public RoomFacilityMapping toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (RoomFacilityMapping)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		RoomFacilityMappingImpl roomFacilityMappingImpl = new RoomFacilityMappingImpl();

		roomFacilityMappingImpl.setRoomId(getRoomId());
		roomFacilityMappingImpl.setFacilitiesId(getFacilitiesId());

		roomFacilityMappingImpl.resetOriginalValues();

		return roomFacilityMappingImpl;
	}

	public int compareTo(RoomFacilityMapping roomFacilityMapping) {
		RoomFacilityMappingPK primaryKey = roomFacilityMapping.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		RoomFacilityMapping roomFacilityMapping = null;

		try {
			roomFacilityMapping = (RoomFacilityMapping)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		RoomFacilityMappingPK primaryKey = roomFacilityMapping.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		RoomFacilityMappingModelImpl roomFacilityMappingModelImpl = this;

		roomFacilityMappingModelImpl._originalRoomId = roomFacilityMappingModelImpl._roomId;

		roomFacilityMappingModelImpl._setOriginalRoomId = false;

		roomFacilityMappingModelImpl._originalFacilitiesId = roomFacilityMappingModelImpl._facilitiesId;

		roomFacilityMappingModelImpl._setOriginalFacilitiesId = false;

		roomFacilityMappingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RoomFacilityMapping> toCacheModel() {
		RoomFacilityMappingCacheModel roomFacilityMappingCacheModel = new RoomFacilityMappingCacheModel();

		roomFacilityMappingCacheModel.roomId = getRoomId();

		roomFacilityMappingCacheModel.facilitiesId = getFacilitiesId();

		return roomFacilityMappingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{roomId=");
		sb.append(getRoomId());
		sb.append(", facilitiesId=");
		sb.append(getFacilitiesId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.cignexdatamatics.wrm.model.RoomFacilityMapping");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>roomId</column-name><column-value><![CDATA[");
		sb.append(getRoomId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>facilitiesId</column-name><column-value><![CDATA[");
		sb.append(getFacilitiesId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RoomFacilityMapping.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			RoomFacilityMapping.class
		};
	private long _roomId;
	private long _originalRoomId;
	private boolean _setOriginalRoomId;
	private long _facilitiesId;
	private long _originalFacilitiesId;
	private boolean _setOriginalFacilitiesId;
	private long _columnBitmask;
	private RoomFacilityMapping _escapedModelProxy;
}