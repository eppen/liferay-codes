/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cignexdatamatics.wrm.model.impl;

import com.cignexdatamatics.wrm.model.FloorMaster;
import com.cignexdatamatics.wrm.model.FloorMasterModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FloorMaster service. Represents a row in the &quot;wrm_FloorMaster&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cignexdatamatics.wrm.model.FloorMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FloorMasterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FloorMasterImpl
 * @see com.cignexdatamatics.wrm.model.FloorMaster
 * @see com.cignexdatamatics.wrm.model.FloorMasterModel
 * @generated
 */
public class FloorMasterModelImpl extends BaseModelImpl<FloorMaster>
	implements FloorMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a floor master model instance should use the {@link com.cignexdatamatics.wrm.model.FloorMaster} interface instead.
	 */
	public static final String TABLE_NAME = "wrm_FloorMaster";
	public static final Object[][] TABLE_COLUMNS = {
			{ "floorId", Types.BIGINT },
			{ "locationId", Types.BIGINT },
			{ "floorName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table wrm_FloorMaster (floorId LONG not null primary key,locationId LONG,floorName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table wrm_FloorMaster";
	public static final String ORDER_BY_JPQL = " ORDER BY floorMaster.floorName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY wrm_FloorMaster.floorName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cignexdatamatics.wrm.model.FloorMaster"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cignexdatamatics.wrm.model.FloorMaster"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cignexdatamatics.wrm.model.FloorMaster"),
			true);
	public static long FLOORNAME_COLUMN_BITMASK = 1L;
	public static long LOCATIONID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cignexdatamatics.wrm.model.FloorMaster"));

	public FloorMasterModelImpl() {
	}

	public long getPrimaryKey() {
		return _floorId;
	}

	public void setPrimaryKey(long primaryKey) {
		setFloorId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_floorId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return FloorMaster.class;
	}

	public String getModelClassName() {
		return FloorMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("floorId", getFloorId());
		attributes.put("locationId", getLocationId());
		attributes.put("floorName", getFloorName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long floorId = (Long)attributes.get("floorId");

		if (floorId != null) {
			setFloorId(floorId);
		}

		Long locationId = (Long)attributes.get("locationId");

		if (locationId != null) {
			setLocationId(locationId);
		}

		String floorName = (String)attributes.get("floorName");

		if (floorName != null) {
			setFloorName(floorName);
		}
	}

	public long getFloorId() {
		return _floorId;
	}

	public void setFloorId(long floorId) {
		_floorId = floorId;
	}

	public long getLocationId() {
		return _locationId;
	}

	public void setLocationId(long locationId) {
		_columnBitmask |= LOCATIONID_COLUMN_BITMASK;

		if (!_setOriginalLocationId) {
			_setOriginalLocationId = true;

			_originalLocationId = _locationId;
		}

		_locationId = locationId;
	}

	public long getOriginalLocationId() {
		return _originalLocationId;
	}

	public String getFloorName() {
		if (_floorName == null) {
			return StringPool.BLANK;
		}
		else {
			return _floorName;
		}
	}

	public void setFloorName(String floorName) {
		_columnBitmask = -1L;

		if (_originalFloorName == null) {
			_originalFloorName = _floorName;
		}

		_floorName = floorName;
	}

	public String getOriginalFloorName() {
		return GetterUtil.getString(_originalFloorName);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FloorMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FloorMaster toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (FloorMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		FloorMasterImpl floorMasterImpl = new FloorMasterImpl();

		floorMasterImpl.setFloorId(getFloorId());
		floorMasterImpl.setLocationId(getLocationId());
		floorMasterImpl.setFloorName(getFloorName());

		floorMasterImpl.resetOriginalValues();

		return floorMasterImpl;
	}

	public int compareTo(FloorMaster floorMaster) {
		int value = 0;

		value = getFloorName().compareTo(floorMaster.getFloorName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		FloorMaster floorMaster = null;

		try {
			floorMaster = (FloorMaster)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = floorMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FloorMasterModelImpl floorMasterModelImpl = this;

		floorMasterModelImpl._originalLocationId = floorMasterModelImpl._locationId;

		floorMasterModelImpl._setOriginalLocationId = false;

		floorMasterModelImpl._originalFloorName = floorMasterModelImpl._floorName;

		floorMasterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FloorMaster> toCacheModel() {
		FloorMasterCacheModel floorMasterCacheModel = new FloorMasterCacheModel();

		floorMasterCacheModel.floorId = getFloorId();

		floorMasterCacheModel.locationId = getLocationId();

		floorMasterCacheModel.floorName = getFloorName();

		String floorName = floorMasterCacheModel.floorName;

		if ((floorName != null) && (floorName.length() == 0)) {
			floorMasterCacheModel.floorName = null;
		}

		return floorMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{floorId=");
		sb.append(getFloorId());
		sb.append(", locationId=");
		sb.append(getLocationId());
		sb.append(", floorName=");
		sb.append(getFloorName());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.cignexdatamatics.wrm.model.FloorMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>floorId</column-name><column-value><![CDATA[");
		sb.append(getFloorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationId</column-name><column-value><![CDATA[");
		sb.append(getLocationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>floorName</column-name><column-value><![CDATA[");
		sb.append(getFloorName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FloorMaster.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			FloorMaster.class
		};
	private long _floorId;
	private long _locationId;
	private long _originalLocationId;
	private boolean _setOriginalLocationId;
	private String _floorName;
	private String _originalFloorName;
	private long _columnBitmask;
	private FloorMaster _escapedModelProxy;
}