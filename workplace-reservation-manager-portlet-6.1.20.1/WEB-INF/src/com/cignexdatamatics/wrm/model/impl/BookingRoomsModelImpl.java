/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cignexdatamatics.wrm.model.impl;

import com.cignexdatamatics.wrm.model.BookingRooms;
import com.cignexdatamatics.wrm.model.BookingRoomsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BookingRooms service. Represents a row in the &quot;wrm_BookingRooms&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cignexdatamatics.wrm.model.BookingRoomsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BookingRoomsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BookingRoomsImpl
 * @see com.cignexdatamatics.wrm.model.BookingRooms
 * @see com.cignexdatamatics.wrm.model.BookingRoomsModel
 * @generated
 */
public class BookingRoomsModelImpl extends BaseModelImpl<BookingRooms>
	implements BookingRoomsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a booking rooms model instance should use the {@link com.cignexdatamatics.wrm.model.BookingRooms} interface instead.
	 */
	public static final String TABLE_NAME = "wrm_BookingRooms";
	public static final Object[][] TABLE_COLUMNS = {
			{ "BRMappingId", Types.BIGINT },
			{ "bookingId", Types.BIGINT },
			{ "roomId", Types.BIGINT },
			{ "bookingDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table wrm_BookingRooms (BRMappingId LONG not null primary key,bookingId LONG,roomId LONG,bookingDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table wrm_BookingRooms";
	public static final String ORDER_BY_JPQL = " ORDER BY bookingRooms.bookingDate ASC, bookingRooms.bookingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY wrm_BookingRooms.bookingDate ASC, wrm_BookingRooms.bookingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cignexdatamatics.wrm.model.BookingRooms"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cignexdatamatics.wrm.model.BookingRooms"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cignexdatamatics.wrm.model.BookingRooms"),
			true);
	public static long BOOKINGDATE_COLUMN_BITMASK = 1L;
	public static long BOOKINGID_COLUMN_BITMASK = 2L;
	public static long ROOMID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cignexdatamatics.wrm.model.BookingRooms"));

	public BookingRoomsModelImpl() {
	}

	public long getPrimaryKey() {
		return _BRMappingId;
	}

	public void setPrimaryKey(long primaryKey) {
		setBRMappingId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_BRMappingId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return BookingRooms.class;
	}

	public String getModelClassName() {
		return BookingRooms.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("BRMappingId", getBRMappingId());
		attributes.put("bookingId", getBookingId());
		attributes.put("roomId", getRoomId());
		attributes.put("bookingDate", getBookingDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long BRMappingId = (Long)attributes.get("BRMappingId");

		if (BRMappingId != null) {
			setBRMappingId(BRMappingId);
		}

		Long bookingId = (Long)attributes.get("bookingId");

		if (bookingId != null) {
			setBookingId(bookingId);
		}

		Long roomId = (Long)attributes.get("roomId");

		if (roomId != null) {
			setRoomId(roomId);
		}

		Date bookingDate = (Date)attributes.get("bookingDate");

		if (bookingDate != null) {
			setBookingDate(bookingDate);
		}
	}

	public long getBRMappingId() {
		return _BRMappingId;
	}

	public void setBRMappingId(long BRMappingId) {
		_BRMappingId = BRMappingId;
	}

	public long getBookingId() {
		return _bookingId;
	}

	public void setBookingId(long bookingId) {
		_columnBitmask = -1L;

		if (!_setOriginalBookingId) {
			_setOriginalBookingId = true;

			_originalBookingId = _bookingId;
		}

		_bookingId = bookingId;
	}

	public long getOriginalBookingId() {
		return _originalBookingId;
	}

	public long getRoomId() {
		return _roomId;
	}

	public void setRoomId(long roomId) {
		_columnBitmask |= ROOMID_COLUMN_BITMASK;

		if (!_setOriginalRoomId) {
			_setOriginalRoomId = true;

			_originalRoomId = _roomId;
		}

		_roomId = roomId;
	}

	public long getOriginalRoomId() {
		return _originalRoomId;
	}

	public Date getBookingDate() {
		return _bookingDate;
	}

	public void setBookingDate(Date bookingDate) {
		_columnBitmask = -1L;

		if (_originalBookingDate == null) {
			_originalBookingDate = _bookingDate;
		}

		_bookingDate = bookingDate;
	}

	public Date getOriginalBookingDate() {
		return _originalBookingDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BookingRooms.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BookingRooms toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (BookingRooms)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		BookingRoomsImpl bookingRoomsImpl = new BookingRoomsImpl();

		bookingRoomsImpl.setBRMappingId(getBRMappingId());
		bookingRoomsImpl.setBookingId(getBookingId());
		bookingRoomsImpl.setRoomId(getRoomId());
		bookingRoomsImpl.setBookingDate(getBookingDate());

		bookingRoomsImpl.resetOriginalValues();

		return bookingRoomsImpl;
	}

	public int compareTo(BookingRooms bookingRooms) {
		int value = 0;

		value = DateUtil.compareTo(getBookingDate(),
				bookingRooms.getBookingDate());

		if (value != 0) {
			return value;
		}

		if (getBookingId() < bookingRooms.getBookingId()) {
			value = -1;
		}
		else if (getBookingId() > bookingRooms.getBookingId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		BookingRooms bookingRooms = null;

		try {
			bookingRooms = (BookingRooms)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = bookingRooms.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BookingRoomsModelImpl bookingRoomsModelImpl = this;

		bookingRoomsModelImpl._originalBookingId = bookingRoomsModelImpl._bookingId;

		bookingRoomsModelImpl._setOriginalBookingId = false;

		bookingRoomsModelImpl._originalRoomId = bookingRoomsModelImpl._roomId;

		bookingRoomsModelImpl._setOriginalRoomId = false;

		bookingRoomsModelImpl._originalBookingDate = bookingRoomsModelImpl._bookingDate;

		bookingRoomsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BookingRooms> toCacheModel() {
		BookingRoomsCacheModel bookingRoomsCacheModel = new BookingRoomsCacheModel();

		bookingRoomsCacheModel.BRMappingId = getBRMappingId();

		bookingRoomsCacheModel.bookingId = getBookingId();

		bookingRoomsCacheModel.roomId = getRoomId();

		Date bookingDate = getBookingDate();

		if (bookingDate != null) {
			bookingRoomsCacheModel.bookingDate = bookingDate.getTime();
		}
		else {
			bookingRoomsCacheModel.bookingDate = Long.MIN_VALUE;
		}

		return bookingRoomsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{BRMappingId=");
		sb.append(getBRMappingId());
		sb.append(", bookingId=");
		sb.append(getBookingId());
		sb.append(", roomId=");
		sb.append(getRoomId());
		sb.append(", bookingDate=");
		sb.append(getBookingDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.cignexdatamatics.wrm.model.BookingRooms");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>BRMappingId</column-name><column-value><![CDATA[");
		sb.append(getBRMappingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bookingId</column-name><column-value><![CDATA[");
		sb.append(getBookingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roomId</column-name><column-value><![CDATA[");
		sb.append(getRoomId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bookingDate</column-name><column-value><![CDATA[");
		sb.append(getBookingDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BookingRooms.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			BookingRooms.class
		};
	private long _BRMappingId;
	private long _bookingId;
	private long _originalBookingId;
	private boolean _setOriginalBookingId;
	private long _roomId;
	private long _originalRoomId;
	private boolean _setOriginalRoomId;
	private Date _bookingDate;
	private Date _originalBookingDate;
	private long _columnBitmask;
	private BookingRooms _escapedModelProxy;
}